version: 2.1

# Define the executors
executors:
  java-executor:
    docker:
      - image: cimg/openjdk:21.0.2  # OpenJDK 21 Docker image for Java-based builds

# Define the jobs
jobs:
  build:
    executor: java-executor
    parameters:
      jar-file-path:
        default: build/libs/animal-insurance.war
        type: string
    steps:
      - checkout

      # Set execute permission for Gradle Wrapper
      - run:
          name: Set Execute Permission for Gradle Wrapper
          command: chmod +x ./gradlew

      # Download and cache dependencies
      - run:
          name: Resolve dependencies
          command: ./gradlew dependencies

      # Build and run tests with coverage
      - run:
          name: Build and Test
          command: ./gradlew clean build test jacocoTestReport

      # Store Jacoco code coverage reports
      - store_artifacts:
          path: build/reports/jacoco/test/html
          destination: jacoco-test-reports/

      # Store quality check reports
      - store_artifacts:
          path: build/reports/checkstyle/
          destination: quality-checks/checkstyle
      - store_artifacts:
          path: build/reports/pmd/
          destination: quality-checks/pmd
      - store_artifacts:
          path: build/reports/spotbugs/
          destination: quality-checks/spotbugs

      # Persist compiled JAR file and build outputs
      - persist_to_workspace:
          root: .
          paths:
            - <<parameters.jar-file-path>>

  package:
    executor: java-executor
    working_directory: ~/workspace
    parameters:
      service-name:
        default: generated-fineos
        type: string
      maintainer:
        default: faiz.qureshi@everestek.com
        type: string
      jar-file-name:
        default: animal-insurance.war
        type: string
      jar-file-path:
        default: build/libs/animal-insurance.war
        type: string
      docker-hub-repo:
        default: faizqureshi/java-demo
        type: string
      docker-image-version:
        default: 1.0.0
        type: string

    steps:
      - checkout

      # Attach workspace to use the built JAR file
      - attach_workspace:
          at: .

      # Set up Docker
      - setup_remote_docker

      # Build and save Docker image
      - run:
          name: Build and save Docker Image
          command: |
            export TIMESTAMP=$(date +"%Y%m%d%H%M%S")
            export TAG=<<parameters.docker-image-version>>-${TIMESTAMP}_SNAPSHOT
            docker build \
              --build-arg SERVICE_NAME=<<parameters.service-name>> \
              --build-arg MAINTAINER=<<parameters.maintainer>> \
              --build-arg JAR_FILE_PATH=<<parameters.jar-file-path>> \
              --build-arg JAR_FILE_NAME=<<parameters.jar-file-name>> \
              -t <<parameters.docker-hub-repo>>:${TAG} .
            docker save -o my-app.tar <<parameters.docker-hub-repo>>:${TAG}
            echo $TAG > tag.txt

      # Persist Docker image and tag for publish job
      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - tag.txt
            - my-app.tar

  publish:
    executor: java-executor
    parameters:
      docker-hub-repo:
        default: faizqureshi/java-demo
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/workspace
      - setup_remote_docker

      # Load tag name
      - run:
          name: Export Metadata
          command: |
            export TAG="$(cat /home/circleci/workspace/tag.txt)"
            echo "TAG='${TAG}'"
            echo "export TAG='${TAG}'" >> $BASH_ENV

      # Load Docker image from tar file
      - run:
          name: Load Docker image
          command: docker load -i /home/circleci/workspace/my-app.tar

      # Log in to Docker Hub
      - run:
          name: Log in to Docker Hub
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin

      # Push Docker image to Docker Hub
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            echo "Pushing image: $TAG"
            docker push <<parameters.docker-hub-repo>>:$TAG

# Define the workflow
workflows:
  version: 2
  build:
    jobs:
      - build:
          name: build
      - package:
          name: package
          requires:
            - build  # Ensure package runs only after build is done
      - publish:
          name: publish
          requires:
            - package